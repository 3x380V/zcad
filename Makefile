.PHONY: checkallvars checkvars clean zcadenv zcadelectrotechenv version zcad zcadelectrotech afterzcadelectrotechbuild cleanzcad cleanzcadelectrotech installpkgstolaz zcadelectrotechpdfuseguide rmpkgslibs tests
default: cleanzcad
ZCVERSION:=$(shell git describe --tags) $(shell git symbolic-ref --short HEAD)
QZCVERSION:='$(ZCVERSION)'

OSDETECT:=
ifeq ($(OS),Windows_NT)
	OSDETECT:=WIN32
else
	UNAME_S:=$(shell uname -s)
	ifeq ($(UNAME_S),Linux)
		OSDETECT:=LINUX
	endif
	ifeq ($(UNAME_S),Darwin)
		OSDETECT:=OSX
	endif
endif

CPUDETECT:=
ifeq ($(OS),Windows_NT)
	ifeq ($(PROCESSOR_ARCHITECTURE),AMD64)
		CPUDETECT:=AMD64
	endif
	ifeq ($(PROCESSOR_ARCHITECTURE),x86)
		CPUDETECT:=IA32
	endif
else
	UNAME_P := $(shell uname -p)
	ifeq ($(UNAME_P),x86_64)
		CPUDETECT:=AMD64
	endif
	ifneq ($(filter %86,$(UNAME_P)),)
		CPUDETECT:=IA32
	endif
	ifneq ($(filter arm%,$(UNAME_P)),)
		CPUDETECT:=ARM
	endif
endif

INSTALLPREFIX:=NeedReplaceToDistribPath
ifeq ($(OSDETECT),WIN32)
	INSTALLPREFIX:=C:\Program Files\zcad
else
	ifeq ($(OSDETECT),LINUX)
		INSTALLPREFIX:=/var/lib/zcad
	else
		ifeq ($(OSDETECT),OSX)
			LP:=/var/lib/zcad
		else
			LP:=/var/lib/zcad
		endif
	endif
endif

PATHDELIM:=/
ifeq ($(OSDETECT),WIN32)
	PATHDELIM:=\\
endif
PATHDELIM:=$(strip $(PATHDELIM))

PCP:=
ifeq ($(OSDETECT),WIN32)
	PCP:=$(LOCALAPPDATA)\lazarus
else
	ifeq ($(OSDETECT),LINUX)
		PCP:='~/.lazarus'
	else
		ifeq ($(OSDETECT),OSX)
			PCP:=~/.lazarus
		else
			PCP:=~/.lazarus
		endif
	endif
endif

LP:=
ifeq ($(OSDETECT),WIN32)
	LP:=C:\lazarus
else
	ifeq ($(OSDETECT),LINUX)
		LP:=/usr/bin
	else
		ifeq ($(OSDETECT),OSX)
			LP:=~/lazarus
		else
			LP:=~/lazarus
		endif
	endif
endif

LAZBUILD:=$(LP)$(PATHDELIM)lazbuild

ZP:=$(if $(wildcard $(LAZBUILD)),$(shell $(LAZBUILD) --pcp=$(PCP) cad_source$(PATHDELIM)zcad.lpi --get-expand-text=$$\(ProjPath\)..$(PATHDELIM)cad$(PATHDELIM)bin$(PATHDELIM)$$\(TargetCPU\)-$$\(TargetOS\)),$())

checkallvars: checkvars 
	@echo OSDETECT=$(OSDETECT)
	@echo CPUDETECT=$(CPUDETECT)

checkvars:              
	@echo PCP=$(PCP)
	@echo LP=$(LP)
	@echo ZP=$(ZP)
	@echo INSTALLPREFIX=$(INSTALLPREFIX)

clean:                  
	rm -rf cad_source/autogenerated/*
	rm -rf cad_source/autogenerated
	rm -rf cad/*
	rm -rf cad
	rm -rf lib/*
	rm -rf errors/*.bak
	rm -rf errors/*.dbpas

updatezcadenv: checkvars      
	rm -rf cad/data/blocks
	rm -rf cad/cfg/components
	rm -rf cad/cfg/configs
	rm -rf cad/data/examples
	rm -rf cad/data/fonts
	rm -rf cad/data/images
	rm -rf cad/data/languages
	rm -rf cad/cfg/menu
	rm -rf cad/data/programdb
	rm -rf cad/data/template
	cp -r environment/runtimefiles/common/* cad
	cp -r environment/runtimefiles/zcad/* cad

updatezcadelectrotechenv: checkvars      
	rm -rf cad/data/blocks
	rm -rf cad/cfg/components
	rm -rf cad/cfg/configs
	rm -rf cad/data/examples
	rm -rf cad/data/fonts
	rm -rf cad/data/images
	rm -rf cad/data/languages
	rm -rf cad/cfg/menu
	rm -rf cad/data/programdb
	rm -rf cad/data/template
	cp -r environment/runtimefiles/common/* cad
	cp -r environment/runtimefiles/zcadelectrotech/* cad

zcadenv: checkvars      
	mkdir cad
	mkdir $(subst /,$(PATHDELIM),cad_source/autogenerated)
	cp -r environment/runtimefiles/common/* cad
	cp -r environment/runtimefiles/zcad/* cad
	echo create_file>cad_source/autogenerated/buildmode.inc
	rm -r cad_source/autogenerated/buildmode.inc

replaceinstallprefix:
ifeq ($(OSDETECT),WIN32)
	powershell -ex bypass -c "(Get-Content -Path 'cad\cfg\configs\config.xml') -replace 'NeedReplaceToDistribPath','$(INSTALLPREFIX)' | Set-Content -Path 'cad\cfg\configs\config.xml'"
else
	sed -i "s/NeedReplaceToDistribPath/$(shell printf '%s' "$(INSTALLPREFIX)" | sed 's/[]\/$*.^[]/\\&/g')/g" cad/cfg/configs/config.xml
endif

zcadelectrotechenv: checkvars 
	mkdir cad
	mkdir $(subst /,$(PATHDELIM),cad_source/autogenerated)
	cp -r environment/runtimefiles/common/* cad
	cp -r environment/runtimefiles/zcadelectrotech/* cad
	echo create_file>cad_source/autogenerated/buildmode.inc
	rm -r cad_source/autogenerated/buildmode.inc

version:
	echo ZCAD Version: $(ZCVERSION)
	echo quoted ZCAD Version: $(QZCVERSION)
#	@echo $(QZCVERSION) > cad_source/zcadversion.inc
ifeq ($(OSDETECT),WIN32)
	cmd.exe "/C echo '$(ZCVERSION)' > cad_source/zcadversion.inc"
else
	echo \'$(ZCVERSION)\' > cad_source/zcadversion.inc
endif
	@echo $(ZCVERSION) > cad_source/zcadversion.txt
zcad: checkvars version       
	$(LAZBUILD) --pcp=$(PCP) cad_source/utils/typeexporter.lpi
	environment/typeexporter/typeexporter pathprefix=cad_source/ outputfile=cad/data/rtl/system.pas processfiles=environment/typeexporter/zcad.files
	$(LAZBUILD) --pcp=$(PCP) cad_source/zcad.lpi

zcadelectrotech: checkvars version
	$(LAZBUILD) --pcp=$(PCP) cad_source/utils/typeexporter.lpi
	environment/typeexporter/typeexporter pathprefix=cad_source/ outputfile=cad/data/rtl/system.pas processfiles=environment/typeexporter/zcad.files+environment/typeexporter/zcadelectrotech.files define=ELECTROTECH
	$(LAZBUILD) --pcp=$(PCP) cad_source/zcad.lpi

afterzcadelectrotechbuild: checkallvars version
	$(ZP)/zcad nosplash runscript cad/cfg/components/afterbuild.cmd
cad:
	mkdir cad
cad/data:
	mkdir $(subst /,$(PATHDELIM),cad/data)
cad/data/help: cad cad/data
	mkdir $(subst /,$(PATHDELIM),cad/data/help)
cad/data/help/locale: cad cad/data cad/data/help
	mkdir $(subst /,$(PATHDELIM),cad/data/help/locale)
cad/data/help/locale/ru: cad cad/data cad/data/help cad/data/help/locale
	mkdir $(subst /,$(PATHDELIM),cad/data/help/locale/ru)
cad/data/help/locale/ru/_images: cad cad/data cad/data/help cad/data/help/locale cad/data/help/locale/ru
	mkdir $(subst /,$(PATHDELIM),cad/data/help/locale/ru/_images)

documentation: checkvars cad cad/data cad/data/help cad/data/help/locale cad/data/help/locale/ru cad/data/help/locale/ru/_images
	$(MAKE) -C cad_source/docs/userguide all
	cp cad_source/docs/userguide/*.html cad/data/help
	cp cad_source/docs/userguide/*.pdf cad/data/help
	cp -r cad_source/docs/userguide/locale/ru/_images/* cad/data/help/locale/ru/_images

rmsrcbackups:
	$(MAKE) -C cad_source/ rmsrcbackups

rmpkgslibs:
	$(MAKE) -C cad_source/ rmpkgslibs

tests: checkvars
	$(MAKE) -C cad_source/components/zcontainers/tests LP=$(LP) PCP=$(PCP) clean all
	$(MAKE) -C cad_source/zengine/tests LP=$(LP) PCP=$(PCP) clean all

updatelocalizedpofiles: checkvars
	cp cad/data/languages/rtzcad.po cad/data/languages/rtzcad.pot
	$(LP)$(PATHDELIM)tools$(PATHDELIM)updatepofiles cad/data/languages/rtzcad.pot
	rm -rf cad/data/languages/rtzcad.pot
	cp $(LP)$(PATHDELIM)lcl/languages/*.po cad/data/languages
	cp $(LP)$(PATHDELIM)components/anchordocking/languages/*.po cad/data/languages

cleanzcad: clean zcadenv replaceinstallprefix zcad

cleanzcadelectrotech: clean zcadelectrotechenv replaceinstallprefix zcadelectrotech

installpkgstolaz: checkvars rmpkgslibs
ifneq ($(OSDETECT),OSX)
	$(LAZBUILD) --pcp=$(PCP) --add-package cad_source$(PATHDELIM)other$(PATHDELIM)agraphlaz$(PATHDELIM)lazarus$(PATHDELIM)ag_graph.lpk
	$(LAZBUILD) --pcp=$(PCP) --add-package cad_source$(PATHDELIM)other$(PATHDELIM)agraphlaz$(PATHDELIM)lazarus$(PATHDELIM)ag_math.lpk
	$(LAZBUILD) --pcp=$(PCP) --add-package cad_source$(PATHDELIM)other$(PATHDELIM)agraphlaz$(PATHDELIM)lazarus$(PATHDELIM)ag_vectors.lpk
endif
	$(LAZBUILD) --pcp=$(PCP) --add-package cad_source$(PATHDELIM)other$(PATHDELIM)uniqueinstance$(PATHDELIM)uniqueinstance_package.lpk
	$(LAZBUILD) --pcp=$(PCP) --add-package cad_source$(PATHDELIM)components$(PATHDELIM)metadarkstyle$(PATHDELIM)metadarkstyle.lpk
	$(LAZBUILD) --pcp=$(PCP) --add-package cad_source$(PATHDELIM)components$(PATHDELIM)zcontainers$(PATHDELIM)zcontainers.lpk
	$(LAZBUILD) --pcp=$(PCP) --add-package cad_source$(PATHDELIM)components$(PATHDELIM)zbaseutils$(PATHDELIM)zbaseutils.lpk
	$(LAZBUILD) --pcp=$(PCP) --add-package cad_source$(PATHDELIM)components$(PATHDELIM)zbaseutilsgui$(PATHDELIM)zbaseutilsgui.lpk
	$(LAZBUILD) --pcp=$(PCP) --add-package cad_source$(PATHDELIM)components$(PATHDELIM)zebase$(PATHDELIM)zebase.lpk
	$(LAZBUILD) --pcp=$(PCP) --add-package cad_source$(PATHDELIM)components$(PATHDELIM)zcontrols$(PATHDELIM)zcontrols.lpk
	$(LAZBUILD) --pcp=$(PCP) --add-package cad_source$(PATHDELIM)components$(PATHDELIM)zmacros$(PATHDELIM)zmacros.lpk
	$(LAZBUILD) --pcp=$(PCP) --add-package cad_source$(PATHDELIM)components$(PATHDELIM)zmath$(PATHDELIM)zmath.lpk
	$(LAZBUILD) --pcp=$(PCP) --add-package cad_source$(PATHDELIM)components$(PATHDELIM)zobjectinspector$(PATHDELIM)zobjectinspector.lpk
	$(LAZBUILD) --pcp=$(PCP) --add-package cad_source$(PATHDELIM)components$(PATHDELIM)zscriptbase$(PATHDELIM)zscriptbase.lpk
	$(LAZBUILD) --pcp=$(PCP) --add-package cad_source$(PATHDELIM)components$(PATHDELIM)zscript$(PATHDELIM)zscript.lpk
	$(LAZBUILD) --pcp=$(PCP) --add-package cad_source$(PATHDELIM)components$(PATHDELIM)ztoolbars$(PATHDELIM)ztoolbars.lpk
	$(LAZBUILD) --pcp=$(PCP) --add-package cad_source$(PATHDELIM)components$(PATHDELIM)zundostack$(PATHDELIM)zundostack.lpk
	$(LAZBUILD) --pcp=$(PCP) --add-package cad_source$(PATHDELIM)components$(PATHDELIM)fpdwg$(PATHDELIM)fpdwg.lpk
	$(LAZBUILD) --pcp=$(PCP) --add-package cad_source$(PATHDELIM)components$(PATHDELIM)fpspreadsheet$(PATHDELIM)laz_fpspreadsheet_visual_dsgn.lpk
	$(LAZBUILD) --pcp=$(PCP) cad_source$(PATHDELIM)components$(PATHDELIM)lape$(PATHDELIM)package$(PATHDELIM)lape.lpk
	$(LAZBUILD) --pcp=$(PCP) --add-package cad_source$(PATHDELIM)components$(PATHDELIM)zreaders$(PATHDELIM)zreaders.lpk
	$(LAZBUILD) --pcp=$(PCP) --add-package cad_source$(PATHDELIM)components$(PATHDELIM)fphunspell$(PATHDELIM)fphunspell.lpk
#	$(LAZBUILD) --pcp=$(PCP) --build-ide=""
